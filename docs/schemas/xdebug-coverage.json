{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://koriym.github.io/xdebug-mcp/schemas/xdebug-coverage.json",
  "title": "Xdebug Coverage Result",
  "description": "Raw Xdebug code coverage data output from xdebug_get_code_coverage(). See https://xdebug.org/docs/code_coverage for complete coverage documentation and interpretation guidelines.",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri",
      "description": "JSON Schema reference for this coverage data structure"
    },
    "coverage": {
      "type": "object",
      "description": "Raw coverage data from xdebug_get_code_coverage() - maps file paths to line execution data",
      "patternProperties": {
        "^/.+\\.php$": {
          "type": "object",
          "description": "Coverage data for a single PHP file - key is absolute file path",
          "patternProperties": {
            "^[0-9]+$": {
              "type": "integer",
              "enum": [1, -1, -2],
              "description": "Line execution status: 1=executed, -1=not executed, -2=not executable"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "required": ["$schema", "coverage"],
  "additionalProperties": false,

  "links": [
    {
      "rel": "specification",
      "href": "https://xdebug.org/docs/code_coverage",
      "title": "Official Xdebug Code Coverage Documentation",
      "description": "Complete documentation of Xdebug code coverage functionality, data formats, and interpretation"
    },
    {
      "rel": "function-reference",
      "href": "https://xdebug.org/docs/code_coverage#xdebug_get_code_coverage",
      "title": "xdebug_get_code_coverage() Documentation",
      "description": "API documentation for the function that generates this coverage data"
    },
    {
      "rel": "self",
      "href": "https://koriym.github.io/xdebug-mcp/schemas/xdebug-coverage.json",
      "title": "JSON Schema for Xdebug Coverage Results",
      "description": "This schema definition for validating Xdebug coverage output"
    },
    {
      "rel": "related",
      "href": "https://github.com/koriym/xdebug-mcp",
      "title": "Xdebug MCP Server Repository",
      "description": "Source code and documentation for the Xdebug MCP Server project"
    },
    {
      "rel": "tool",
      "href": "mcp://xdebug_start_coverage",
      "title": "MCP Tool: Start Coverage",
      "description": "MCP tool to generate coverage data programmatically"
    },
    {
      "rel": "command",
      "href": "file://bin/xdebug-coverage",
      "title": "CLI Coverage Tool",
      "description": "Command line tool that generates this coverage data format"
    }
  ],

  "examples": [
    {
      "$schema": "https://koriym.github.io/xdebug-mcp/schemas/xdebug-coverage.json",
      "coverage": {
        "/path/to/src/Class.php": {
          "1": -2,
          "3": 1,
          "4": 1,
          "7": -1,
          "8": -1,
          "12": 1
        }
      }
    }
  ],

  "x-interpretation-guide": {
    "line_status_codes": {
      "1": "Line was executed during test run",
      "-1": "Line is executable but was not executed",
      "-2": "Line is not executable (comments, declarations, etc.)"
    },
    "coverage_calculation": {
      "formula": "(executed_lines / executable_lines) * 100",
      "executable_lines": "Count of lines with status 1 or -1",
      "executed_lines": "Count of lines with status 1",
      "ignored_lines": "Lines with status -2 are not counted in coverage percentage"
    },
    "ai_analysis_tips": {
      "focus_on_negative_one": "Lines with status -1 are the gaps - these need test coverage",
      "group_consecutive_gaps": "Consecutive -1 lines often represent untested functions or branches",
      "prioritize_by_importance": "Focus coverage efforts on business-critical code paths first"
    }
  }
}