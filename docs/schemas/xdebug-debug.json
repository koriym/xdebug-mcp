{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://koriym.github.io/xdebug-mcp/schemas/xdebug-debug-v1.json",
  "title": "Xdebug Debug Result",
  "description": "Comprehensive debugging result combining breakpoint state ('crime scene photo') and execution trace ('surveillance footage') for AI-powered PHP debugging. Follows the principle: 'Error message is the crime photo. Trace is the crime footage.' - providing both the current state at breakpoints and the complete execution history in Xdebug .xt format.",
  "type": "object",
  "properties": {
    "breaks": {
      "type": "array",
      "description": "Breakpoints hit during execution (supports multiple breakpoints)",
      "items": {
        "$ref": "#/definitions/breakpoint"
      },
      "minItems": 1
    },
    "trace": {
      "$ref": "xdebug-trace.json"
    },
    "analysis_context": {
      "type": "string",
      "description": "Optional contextual description for AI analysis (e.g., 'Debugging login validation with invalid credentials')"
    }
  },
  "required": ["breaks", "trace"],
  "additionalProperties": false,

  "definitions": {
    "breakpoint": {
      "type": "object",
      "description": "Debug state captured at a breakpoint - the 'crime scene photo' showing current execution location and variable values when execution paused",
      "properties": {
        "step": {
          "type": "integer",
          "minimum": 1,
          "description": "Sequential step number for this breakpoint in Forward Trace debugging"
        },
        "location": {
          "type": "object",
          "description": "Execution location where break occurred",
          "properties": {
            "file": {
              "type": "string",
              "description": "File path where break occurred"
            },
            "line": {
              "type": "integer",
              "minimum": 1,
              "description": "Line number where break occurred"
            }
          },
          "required": ["file", "line"],
          "additionalProperties": false
        },
        "variables": {
          "type": "object",
          "description": "Variable values at this breakpoint",
          "additionalProperties": true
        }
      },
      "required": ["location", "variables"],
      "additionalProperties": false
    }
  },

  "links": [
    {
      "rel": "specification",
      "href": "https://xdebug.org/docs/trace",
      "title": "Xdebug Trace Format Documentation",
      "description": "Official documentation for Xdebug trace file format (.xt) structure and interpretation"
    },
    {
      "rel": "debug-guide",
      "href": "https://koriym.github.io/xdebug-mcp/debug-guidelines.md",
      "title": "PHP Xdebug Trace Analysis Guidelines",
      "description": "Complete debugging guide: Forward Trace methodology, conditional breakpoints, step recording, performance profiling, and trace analysis for runtime debugging without code modifications"
    },
    {
      "rel": "self",
      "href": "https://koriym.github.io/xdebug-mcp/schemas/xdebug-debug.json",
      "title": "JSON Schema for Xdebug Debug Results"
    },
    {
      "rel": "example",
      "href": "{trace_file}",
      "title": "Generated Trace File",
      "templated": true
    }
  ]
}
