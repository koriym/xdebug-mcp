#!/usr/bin/env php
<?php

declare(strict_types=1);

// Load autoloader and get project root
$projectRoot = require __DIR__ . '/autoload.php';

use XdebugMcp\XdebugProfiler;

// Parse command line arguments
function showHelp(string $scriptName): void {
    echo "Usage: $scriptName [--claude] -- php script.php [args...]\n";
    echo "\n";
    echo "Traces execution of PHP scripts with Xdebug enabled.\n";
    echo "Simply add '$scriptName --' before any existing php command!\n";
    echo "\n";
    echo "Options:\n";
    echo "  --claude  Auto-analyze with Claude after tracing\n";
    echo "\n";
    echo "Examples:\n";
    echo "  # Your existing command:\n";
    echo "  php app.php\n";
    echo "\n";
    echo "  # Add trace:\n";
    echo "  $scriptName -- php app.php\n";
    echo "\n";
    echo "  # Auto-analyze with Claude:\n";
    echo "  $scriptName --claude -- php app.php\n";
    echo "\n";
    echo "Output:\n";
    echo "  - Trace files: /tmp/trace.*.xt\n";
    echo "  - Comprehensive function call statistics\n";
    echo "  - I/O operations, memory usage, and timing analysis\n";
}

// Check for help flag (validation is handled by autoload.php)
if (isset($argv[1]) && ($argv[1] === '--help' || $argv[1] === '-h')) {
    showHelp($argv[0]);
    exit(0);
}

// Parse flags
$claudeAnalysis = in_array('--claude', $argv);

// Remove flags and find target file
$args = array_values(array_diff($argv, ['--claude', '--']));
array_shift($args); // remove script name

// Skip 'php' if present
if (isset($args[0]) && $args[0] === 'php') {
    array_shift($args);
}

$targetFile = $args[0] ?? '';
$phpArgs = array_slice($args, 1);

// Check target file exists
if (!file_exists($targetFile)) {
    fwrite(STDERR, "❌ Error: File '$targetFile' not found\n");
    exit(1);
}

// Execute trace and analyze results
try {
    $profiler = new XdebugProfiler();
    $traceFile = $profiler->executeTrace($targetFile, $phpArgs);
    $stats = $profiler->parseTraceFile($traceFile);
    $formattedStats = $profiler->generateStatistics($stats);
    $profiler->displayResults($formattedStats);
} catch (Exception $e) {
    echo "❌ Error: " . $e->getMessage() . "\n";
    exit(1);
}

if ($claudeAnalysis) {
    echo "\n🤖 Starting Claude Code analysis...\n";

    $localeOutput = shell_exec('defaults read -g AppleLocale') ?: '';
    $lang = str_contains($localeOutput, 'ja_JP') ? 'Japanese' : 'English';
    $claudePrompt = "Read and analyze this Xdebug trace file. Look for performance bottlenecks, infinite loops, unexpected function calls, memory issues, and suggest optimizations. Explain the execution flow and highlight any problematic patterns: $traceFile. Answer in $lang.";

    passthru('claude ' . escapeshellarg($claudePrompt));
    echo "\n";
    echo "🤖 Claude Code analysis completed. 'claude --continue' if you have follow-up questions.\n";
}

exit(0);
