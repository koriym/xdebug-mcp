#!/usr/bin/env php
<?php

declare(strict_types=1);

// Load autoloader and get project root
$projectRoot = require __DIR__ . '/autoload.php';

use Koriym\XdebugMcp\XdebugTracer;

// Parse command line arguments
function showHelp(string $scriptName): void {
    echo "Usage: $scriptName [--json] [--claude] [--context=TEXT] -- php script.php [args...]\n";
    echo "\n";
    echo "Executes PHP scripts with Xdebug tracing and provides execution analysis.\n";
    echo "\n";
    echo "Options:\n";
    echo "  --json           Output JSON format (for MCP/AI consumption)\n";
    echo "  --claude         Auto-analyze with Claude after tracing\n";
    echo "  --context=TEXT   Add contextual description for AI analysis\n";
    echo "\n";
    echo "Examples:\n";
    echo "  # Human-readable statistics (default):\n";
    echo "  $scriptName -- php app.php\n";
    echo "\n";
    echo "  # JSON output for AI/MCP:\n";
    echo "  $scriptName --json -- php app.php\n";
    echo "\n";
    echo "  # Auto-analyze with Claude:\n";
    echo "  $scriptName --claude -- php app.php\n";
    echo "\n";
    echo "  # With context for self-explanatory analysis:\n";
    echo "  $scriptName --context=\"Debugging authentication flow\" -- php AuthTest.php\n";
    echo "\n";
    echo "Output:\n";
    echo "  - Default: Human-readable execution statistics\n";
    echo "  - --json: JSON result with trace_file, total_lines, specification\n";
    echo "  - Schema: https://koriym.github.io/xdebug-mcp/schemas/xdebug-trace.json\n";
}

// Check for help flag (validation is handled by autoload.php)
if (isset($argv[1]) && ($argv[1] === '--help' || $argv[1] === '-h')) {
    showHelp($argv[0]);
    exit(0);
}

// Parse flags
$jsonOutput = in_array('--json', $argv);
$claudeAnalysis = in_array('--claude', $argv);
$context = null;

// Parse --context= flag
foreach ($argv as $arg) {
    if (str_starts_with($arg, '--context=')) {
        $context = substr($arg, 10);
        break;
    }
}

// Remove flags and find target file
$flagsToRemove = ['--json', '--claude', '--'];
if ($context !== null) {
    $flagsToRemove[] = '--context=' . $context;
}
$args = array_values(array_diff($argv, $flagsToRemove));
array_shift($args); // remove script name

// Skip 'php' if present
if (isset($args[0]) && $args[0] === 'php') {
    array_shift($args);
}

$targetFile = $args[0] ?? '';
$phpArgs = array_slice($args, 1);

// Check target file exists
if (!file_exists($targetFile)) {
    fwrite(STDERR, "❌ Error: File '$targetFile' not found\n");
    exit(1);
}

// Execute trace and generate output
try {
    $tracer = new XdebugTracer();
    $traceFile = $tracer->executeTrace($targetFile, $phpArgs);
    $stats = $tracer->parseTraceFile($traceFile);
    
    if ($jsonOutput) {
        // JSON output for MCP/AI consumption
        $result = [
            'trace_file' => $traceFile,
            'total_lines' => $stats['total_lines'],
            'unique_functions' => count($stats['unique_functions']),
            'max_call_depth' => $stats['max_depth'],
            'database_queries' => $stats['db_operations'],
            'specification' => 'https://xdebug.org/docs/trace'
        ];
        
        if ($context !== null) {
            $result['analysis_context'] = $context;
        }
        
        echo json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . "\n";
    } else {
        // Simple trace metadata for CLI (consistent with profile style)
        echo "✅ Trace complete: $traceFile\n";
        if ($context !== null) {
            echo "🎯 Context: $context\n";
        }
        echo "📊 {$stats['total_lines']} lines generated\n";
        
        $uniqueFunctionCount = count($stats['unique_functions']);
        echo "📚 $uniqueFunctionCount unique functions\n";
        echo "🔄 {$stats['max_depth']} max call depth\n";
        
        // Only show database queries if there are any
        if ($stats['db_operations'] > 0) {
            echo "🗃️ {$stats['db_operations']} database queries\n";
        }
        
        echo "\n💡 claude \"Analyze $traceFile\"\n";
    }
    
    if ($claudeAnalysis) {
        $tracer->analyzeWithClaude($traceFile);
    }
} catch (Exception $e) {
    fwrite(STDERR, "❌ Error: " . $e->getMessage() . "\n");
    exit(1);
}

exit(0);
