#!/usr/bin/env php
<?php

declare(strict_types=1);

// Load autoloader and determine project root
$autoloadPath = require __DIR__ . '/autoload.php';

// Determine project root from autoloader path
$normalized = str_replace('\\', '/', $autoloadPath);
$projectRoot = str_ends_with($normalized, '/vendor/autoload.php')
    ? dirname($autoloadPath, 2)
    : dirname($autoloadPath);

if (!file_exists($projectRoot . '/composer.json')) {
    fwrite(STDERR, "Error: Could not determine project root from autoloader path: $autoloadPath\n");
    exit(1);
}

// Parse command line arguments
function showHelp(string $scriptName): void {
    echo "Usage: $scriptName PHP_FILE [-- PHP_ARGS...]\n";
    echo "\n";
    echo "Runs Xdebug trace testing on the specified PHP file or command.\n";
    echo "\n";
    echo "Arguments:\n";
    echo "  PHP_FILE    Path to PHP file to trace (required)\n";
    echo "  PHP_ARGS    Arguments to pass to the PHP script (after --)\n";
    echo "\n";
    echo "Examples:\n";
    echo "  $scriptName test/debug_test.php                    # Trace test file\n";
    echo "  $scriptName my_script.php                         # Trace specific file\n";
    echo "  $scriptName bin/page.php -- get /                 # Trace with arguments\n";
    echo "  $scriptName bin/console.php -- cache:clear --env=dev  # Trace console command\n";
    echo "\n";
}

// Check for help flag or missing argument
if (in_array('--help', $argv) || in_array('-h', $argv) || count($argv) < 2) {
    showHelp($argv[0]);
    if (count($argv) < 2) {
        fwrite(STDERR, "‚ùå Error: PHP file argument is required\n");
        exit(1);
    }
    exit(0);
}

// Parse arguments - separate PHP file from PHP arguments
$targetFile = $argv[1];
$phpArgs = [];

// Find -- separator
$separatorIndex = array_search('--', $argv);
if ($separatorIndex !== false) {
    $phpArgs = array_slice($argv, $separatorIndex + 1);
}

// Check target file exists
if (!file_exists($targetFile)) {
    fwrite(STDERR, "‚ùå Error: File '$targetFile' not found\n");
    fwrite(STDERR, "Use '{$argv[0]} --help' for usage information\n");
    exit(1);
}

// Generate unique trace filename
$traceTimestamp = date('Ymd_His');
$traceFile = "/tmp/xdebug_trace_$traceTimestamp";

// Build Xdebug options
$xdebugOpts = [
    '-dzend_extension=xdebug',
    '-dxdebug.mode=trace',
    '-dxdebug.start_with_request=trigger',
    '-dxdebug.trigger_value=TRACE',
    '-dxdebug.trace_format=1',
    '-dxdebug.use_compression=0',
    '-dxdebug.output_dir=/tmp',
    "-dxdebug.trace_output_name=xdebug_trace_$traceTimestamp"
];

// Build command
$command = ['php'];
$command = array_merge($command, $xdebugOpts);
$command[] = $targetFile;
$command = array_merge($command, $phpArgs);

// Set environment variable
putenv('XDEBUG_TRIGGER=TRACE');

// Execute command
if (empty($phpArgs)) {
    echo "üîç Tracing: $targetFile\n";
} else {
    echo "üîç Tracing: $targetFile with arguments: " . implode(' ', $phpArgs) . "\n";
}

// Execute and suppress stderr
$descriptors = [
    0 => ['pipe', 'r'],  // stdin
    1 => ['pipe', 'w'],  // stdout
    2 => ['pipe', 'w'],  // stderr
];

$process = proc_open($command, $descriptors, $pipes);

if (is_resource($process)) {
    // Close stdin
    fclose($pipes[0]);
    
    // Read stdout (if needed for debugging)
    $stdout = stream_get_contents($pipes[1]);
    fclose($pipes[1]);
    
    // Read and ignore stderr
    $stderr = stream_get_contents($pipes[2]);
    fclose($pipes[2]);
    
    // Wait for process to finish
    $returnCode = proc_close($process);
}

// Find the generated trace file
$tracePattern = "/tmp/*trace*{$traceTimestamp}*.xt";
$traceFiles = glob($tracePattern);

if (!empty($traceFiles)) {
    // Sort by modification time (newest first)
    usort($traceFiles, function($a, $b) {
        return filemtime($b) - filemtime($a);
    });
    
    $latestTrace = $traceFiles[0];
    $lineCount = count(file($latestTrace));
    
    echo "‚úÖ Trace complete: $latestTrace\n";
    echo "üìä $lineCount lines generated\n";
} else {
    echo "‚ùå No trace file generated. Check Xdebug configuration.\n";
    exit(1);
}