#!/usr/bin/env php
<?php

declare(strict_types=1);

$projectRoot = require __DIR__ . '/autoload.php';

// Parse --context= flag
$context = null;
foreach ($argv as $arg) {
    if (str_starts_with($arg, '--context=')) {
        $context = substr($arg, 10);
        break;
    }
}

// Show help if requested
// Remove context flag from argv for argument counting
$filteredArgv = [];
foreach ($argv as $arg) {
    if (!str_starts_with($arg, '--context=')) {
        $filteredArgv[] = $arg;
    }
}

if (in_array('--help', $argv) || in_array('-h', $argv) || count($filteredArgv) < 4) {
    fwrite(STDOUT, "Usage: xdebug-coverage [--context=TEXT] -- php script.php [args...]\n");
    fwrite(STDOUT, "\n");
    fwrite(STDOUT, "Executes PHP scripts with Xdebug code coverage and provides coverage analysis.\n");
    fwrite(STDOUT, "\n");
    fwrite(STDOUT, "Options:\n");
    fwrite(STDOUT, "  --context=TEXT   Add contextual description for AI analysis\n");
    fwrite(STDOUT, "\n");
    fwrite(STDOUT, "Examples:\n");
    fwrite(STDOUT, "  xdebug-coverage -- php test.php\n");
    fwrite(STDOUT, "  xdebug-coverage -- php -f script.php arg1 arg2\n");
    fwrite(STDOUT, "  xdebug-coverage --context=\"Testing payment processing\" -- php PaymentTest.php\n");
    fwrite(STDOUT, "\n");
    exit(0);
}

// Skip: [0]="xdebug-coverage" [1]="--" [2]="php"
// Validate target file is provided
if (!isset($filteredArgv[3]) || empty($filteredArgv[3])) {
    fwrite(STDERR, "Error: Target PHP file not specified\n");
    fwrite(STDERR, "Usage: xdebug-coverage [--context=TEXT] -- php <script.php> [args...]\n");
    fwrite(STDERR, "Example: xdebug-coverage -- php test.php\n");
    exit(1);
}

$targetFile = $filteredArgv[3];           // script.php

// Validate target file exists and is readable
if (!file_exists($targetFile)) {
    fwrite(STDERR, "Error: Target file '$targetFile' does not exist\n");
    exit(1);
}

if (!is_readable($targetFile)) {
    fwrite(STDERR, "Error: Target file '$targetFile' is not readable\n");
    exit(1);
}

$phpArgs = array_slice($filteredArgv, 4); // remaining args

// Create coverage scripts
// NOTE: Cannot use register_shutdown_function() directly in current process
// because Xdebug functions require Xdebug to be enabled in the target process
$srcPath = $projectRoot . '/src';

$prependScript = tempnam(sys_get_temp_dir(), 'coverage_start_');
$contextValue = $context;
file_put_contents($prependScript, "<?php
xdebug_set_filter(XDEBUG_FILTER_CODE_COVERAGE, XDEBUG_PATH_INCLUDE, ['$srcPath/']);
xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);

register_shutdown_function(function() {
    \$coverage = xdebug_get_code_coverage();
    \$result = [];
    
    foreach (\$coverage as \$file => \$lines) {
        \$covered = \$uncovered = [];
        
        foreach (\$lines as \$line => \$status) {
            if (\$status === 1) {
                \$covered[] = \$line;
            } elseif (\$status === -1) {
                \$uncovered[] = \$line;
            }
        }
        
        \$total = count(\$covered) + count(\$uncovered);
        \$result[\$file] = [
            'coverage' => \$total > 0 ? round(count(\$covered) / \$total * 100, 1) : 0,
            'lines_total' => \$total,
            'lines_covered' => count(\$covered),
            'covered_lines' => \$covered,
            'uncovered_lines' => \$uncovered
        ];
    }
    
    // Add context if provided
    \$contextValue = " . var_export($contextValue, true) . ";
    if (\$contextValue !== null) {
        \$result['analysis_context'] = \$contextValue;
    }
    
    echo json_encode(\$result, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
});");

// Execute with Xdebug coverage
$xdebugOptions = [
    '-dzend_extension=xdebug',
    '-dxdebug.mode=coverage',
    "-dauto_prepend_file=$prependScript"
];

$cmd = 'php ' . implode(' ', array_map('escapeshellarg', array_merge($xdebugOptions, [$targetFile], $phpArgs)));

// Execute command and capture output with exit code
$outputLines = [];
$exitCode = null;
exec($cmd . ' 2>&1', $outputLines, $exitCode);

// Output results to STDOUT
$output = implode("\n", $outputLines);
fwrite(STDOUT, $output);
if (!empty($output)) {
    fwrite(STDOUT, "\n");
}

unlink($prependScript);

// Show context in output if provided
if ($context !== null) {
    fwrite(STDERR, "\nðŸŽ¯ Context: $context\n");
}

// Always suggest Claude analysis for coverage data  
fwrite(STDERR, "\nðŸ’¡ Analyze with Claude Code:\n");
fwrite(STDERR, "   claude \"Analyze the code coverage data above\"\n");

exit($exitCode);
