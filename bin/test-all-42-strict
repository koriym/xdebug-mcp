#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * Strict test for ALL 42 MCP tools - fails if any prerequisites are missing
 * This script ensures complete testing environment or exits with error
 */

// Colors for output
define('GREEN', "\033[32m");
define('RED', "\033[31m");
define('YELLOW', "\033[33m");
define('BLUE', "\033[34m");
define('RESET', "\033[0m");

echo BLUE . "🚀 Strict Test of ALL 42 MCP Tools\n" . RESET;
echo YELLOW . "⚠️  This test requires ALL prerequisites or will exit with error\n" . RESET;
echo "=" . str_repeat("=", 60) . "\n\n";

// Step 1: Check if Xdebug is loaded (should not be)
if (extension_loaded('xdebug')) {
    echo RED . "❌ PREREQUISITE FAILED: Xdebug is currently loaded in php.ini\n" . RESET;
    echo YELLOW . "💡 Comment out Xdebug in php.ini:\n" . RESET;
    echo "   ;zend_extension=xdebug\n";
    echo RED . "🚫 Exiting: Cannot test with Xdebug permanently loaded\n" . RESET;
    exit(1);
}

echo GREEN . "✅ Xdebug is not loaded in php.ini (correct)\n" . RESET;

// Step 2: Check if Xdebug extension exists
$xdebugCheck = shell_exec('php -dzend_extension=xdebug.so -m 2>/dev/null | grep xdebug');
if (empty($xdebugCheck)) {
    echo RED . "❌ PREREQUISITE FAILED: Xdebug extension not available\n" . RESET;
    echo YELLOW . "💡 Install Xdebug:\n" . RESET;
    echo "   brew install php\n";
    echo "   pecl install xdebug\n";
    echo RED . "🚫 Exiting: Xdebug extension required for testing\n" . RESET;
    exit(1);
}

echo GREEN . "✅ Xdebug extension is available\n" . RESET;

// Step 3: Check if MCP server responds
$mcpTest = shell_exec('echo \'{"jsonrpc":"2.0","id":1,"method":"tools/list"}\' | php -dzend_extension=xdebug.so bin/xdebug-mcp 2>/dev/null');
if (empty($mcpTest) || !str_contains($mcpTest, 'tools')) {
    echo RED . "❌ PREREQUISITE FAILED: MCP server not responding\n" . RESET;
    echo YELLOW . "💡 Check:\n" . RESET;
    echo "   - composer install completed\n";
    echo "   - bin/xdebug-mcp exists\n";
    echo "   - PHP version >= 8.0\n";
    echo RED . "🚫 Exiting: MCP server required for testing\n" . RESET;
    exit(1);
}

echo GREEN . "✅ MCP server is responding\n" . RESET;

// Step 4: Check if debug session test file exists
if (!file_exists('test/debug_session_test.php')) {
    echo RED . "❌ PREREQUISITE FAILED: test/debug_session_test.php not found\n" . RESET;
    echo RED . "🚫 Exiting: Debug session test file required\n" . RESET;
    exit(1);
}

echo GREEN . "✅ Debug session test file exists\n" . RESET;

// Step 5: Check if debug session is active by testing connection
echo BLUE . "🔌 Checking for active debug session on port 9004...\n" . RESET;

// Simple port connection test
$connection = @fsockopen('127.0.0.1', 9004, $errno, $errstr, 2);
if (!$connection) {
    echo RED . "❌ PREREQUISITE FAILED: No active debug session on port 9004\n" . RESET;
    echo YELLOW . "💡 Start debug session in another terminal:\n" . RESET;
    echo "   php -dzend_extension=xdebug.so -dxdebug.mode=debug -dxdebug.client_port=9004 -dxdebug.start_with_request=yes test/debug_session_test.php\n";
    echo YELLOW . "💡 Then run this test again\n" . RESET;
    echo RED . "🚫 Exiting: Active debug session required for ALL 42 tools\n" . RESET;
    exit(1);
} else {
    fclose($connection);
    echo GREEN . "✅ Debug session detected on port 9004\n" . RESET;
}

// All prerequisites met - proceed with testing
echo "\n" . GREEN . "🎯 ALL PREREQUISITES MET - Testing all 42 tools\n" . RESET;
echo "=" . str_repeat("=", 60) . "\n";

// Command for testing (with debug mode enabled)
$xdebugMcp = 'php -dzend_extension=xdebug.so -dxdebug.mode=debug,profile,coverage,trace bin/xdebug-mcp';

// Test results tracking
$results = [
    'passed' => 0,
    'failed' => 0,
    'skipped' => 0,
    'failed_tools' => []
];

function testMcpTool(string $toolName, array $arguments = []): string
{
    global $xdebugMcp, $results;
    
    echo sprintf("  %-35s ... ", $toolName);
    
    $request = json_encode([
        'jsonrpc' => '2.0',
        'id' => uniqid(),
        'method' => 'tools/call',
        'params' => [
            'name' => $toolName,
            'arguments' => $arguments
        ]
    ]);
    
    // All tools should work - no timeout needed as prerequisites are verified
    $command = sprintf('echo %s | %s 2>/dev/null', escapeshellarg($request), $xdebugMcp);
    $output = shell_exec($command);
    
    if ($output === null) {
        echo RED . "FAIL (no output)\n" . RESET;
        $results['failed']++;
        $results['failed_tools'][] = $toolName;
        return 'failed';
    }
    
    // Extract JSON from output
    $lines = explode("\n", trim($output));
    $jsonLine = '';
    foreach ($lines as $line) {
        if (str_starts_with($line, '{"jsonrpc"')) {
            $jsonLine = $line;
            break;
        }
    }
    
    if (empty($jsonLine)) {
        echo RED . "FAIL (no JSON)\n" . RESET;
        $results['failed']++;
        $results['failed_tools'][] = $toolName;
        return 'failed';
    }
    
    $response = json_decode($jsonLine, true);
    if (isset($response['error'])) {
        $message = $response['error']['message'];
        echo RED . "FAIL ($message)\n" . RESET;
        $results['failed']++;
        $results['failed_tools'][] = $toolName;
        return 'failed';
    } elseif (isset($response['result'])) {
        echo GREEN . "PASS\n" . RESET;
        $results['passed']++;
        return 'passed';
    } else {
        echo RED . "FAIL (unexpected format)\n" . RESET;
        $results['failed']++;
        $results['failed_tools'][] = $toolName;
        return 'failed';
    }
}

// Test all 42 tools
echo BLUE . "\n📝 Debugging Tools (11 tools)\n" . RESET;
testMcpTool('xdebug_connect', ['host' => '127.0.0.1', 'port' => 9004]);
testMcpTool('xdebug_disconnect', []);
testMcpTool('xdebug_set_breakpoint', ['filename' => '/tmp/test.php', 'line' => 10]);
testMcpTool('xdebug_remove_breakpoint', ['breakpoint_id' => '1']);
testMcpTool('xdebug_step_into', []);
testMcpTool('xdebug_step_over', []);
testMcpTool('xdebug_step_out', []);
testMcpTool('xdebug_continue', []);
testMcpTool('xdebug_get_stack', []);
testMcpTool('xdebug_get_variables', ['context' => 0]);
testMcpTool('xdebug_eval', ['expression' => '2 + 2']);

echo BLUE . "\n⚡ Profiling Tools (4 tools)\n" . RESET;
testMcpTool('xdebug_start_profiling', []);
testMcpTool('xdebug_stop_profiling', []);
testMcpTool('xdebug_get_profile_info', []);
$profileFile = '/tmp/test_profile.out';
file_put_contents($profileFile, "version: 1\ncmd: php\npart: 1\n\nfn=main\n0 100\n");
testMcpTool('xdebug_analyze_profile', ['profile_file' => $profileFile, 'top_functions' => 5]);
@unlink($profileFile);

echo BLUE . "\n📊 Coverage Tools (6 tools)\n" . RESET;
testMcpTool('xdebug_start_coverage', ['track_unused' => true]);
testMcpTool('xdebug_stop_coverage', []);
testMcpTool('xdebug_get_coverage', ['format' => 'raw']);
$sampleCoverage = ['/tmp/test.php' => [1 => 1, 2 => 1, 3 => 0, 4 => 1]];
testMcpTool('xdebug_analyze_coverage', ['coverage_data' => $sampleCoverage, 'format' => 'text']);
testMcpTool('xdebug_coverage_summary', ['coverage_data' => $sampleCoverage]);

echo BLUE . "\n📈 Statistics Tools (5 tools)\n" . RESET;
testMcpTool('xdebug_get_memory_usage', []);
testMcpTool('xdebug_get_peak_memory_usage', []);
testMcpTool('xdebug_get_stack_depth', []);
testMcpTool('xdebug_get_time_index', []);
testMcpTool('xdebug_info', ['format' => 'array']);

echo BLUE . "\n🚨 Error Handling Tools (3 tools)\n" . RESET;
testMcpTool('xdebug_start_error_collection', []);
testMcpTool('xdebug_stop_error_collection', []);
testMcpTool('xdebug_get_collected_errors', ['clear' => false]);

echo BLUE . "\n🔍 Tracing Tools (5 tools)\n" . RESET;
testMcpTool('xdebug_start_trace', []);
testMcpTool('xdebug_stop_trace', []);
testMcpTool('xdebug_get_tracefile_name', []);
testMcpTool('xdebug_start_function_monitor', ['functions' => ['strlen', 'substr']]);
testMcpTool('xdebug_stop_function_monitor', []);

echo BLUE . "\n🔧 Advanced Debugging Tools (5 tools)\n" . RESET;
testMcpTool('xdebug_list_breakpoints', []);
testMcpTool('xdebug_set_exception_breakpoint', ['exception_name' => 'Exception', 'state' => 'all']);
testMcpTool('xdebug_set_watch_breakpoint', ['expression' => '$var > 10', 'type' => 'write']);
testMcpTool('xdebug_get_function_stack', ['include_args' => true, 'include_object' => true]);
testMcpTool('xdebug_print_function_stack', ['message' => 'Test Stack']);

echo BLUE . "\n⚙️ Configuration Tools (3 tools)\n" . RESET;
testMcpTool('xdebug_call_info', []);
testMcpTool('xdebug_get_features', []);
testMcpTool('xdebug_set_feature', ['feature_name' => 'max_depth', 'value' => '256']);
testMcpTool('xdebug_get_feature', ['feature_name' => 'max_depth']);

// Results summary
$total = $results['passed'] + $results['failed'] + $results['skipped'];

echo "\n" . "=" . str_repeat("=", 60) . "\n";
echo BLUE . "📋 STRICT TEST RESULTS\n" . RESET;
echo "=" . str_repeat("=", 60) . "\n";

echo sprintf("Total tools tested: %d/42\n", $total);
echo sprintf(GREEN . "✅ Passed: %d\n" . RESET, $results['passed']);
echo sprintf(RED . "❌ Failed: %d\n" . RESET, $results['failed']);
echo sprintf(YELLOW . "⏭️  Skipped: %d\n" . RESET, $results['skipped']);

if ($total === 42 && $results['failed'] === 0 && $results['skipped'] === 0) {
    echo "\n" . GREEN . "🎉 PERFECT! All 42 MCP tools working flawlessly!\n" . RESET;
    exit(0);
} else {
    if ($results['failed'] > 0) {
        echo RED . "\n❌ Failed tools:\n" . RESET;
        foreach ($results['failed_tools'] as $tool) {
            echo "  - $tool\n";
        }
    }
    if ($results['skipped'] > 0) {
        echo YELLOW . "\n⚠️  Some tools were skipped unexpectedly\n" . RESET;
    }
    echo RED . "\n🚫 STRICT TEST FAILED: Not all 42 tools passed\n" . RESET;
    exit(1);
}