#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * Quick test script to verify all 42 MCP tools are available and properly configured
 */

// Colors for output
define('GREEN', "\033[32m");
define('RED', "\033[31m");
define('YELLOW', "\033[33m");
define('BLUE', "\033[34m");
define('RESET', "\033[0m");

echo BLUE . "üîç Quick test of MCP Server tool availability...\n" . RESET;
echo "=" . str_repeat("=", 60) . "\n\n";

// Test tools/list endpoint
$listRequest = json_encode([
    'jsonrpc' => '2.0',
    'id' => 1,
    'method' => 'tools/list'
]);

echo "Testing tools/list endpoint...\n";
$command = sprintf('echo %s | php bin/xdebug-mcp 2>/dev/null', escapeshellarg($listRequest));
$output = shell_exec($command);

if ($output === null) {
    echo RED . "‚ùå Failed to execute MCP server\n" . RESET;
    exit(1);
}

// Extract JSON from output
$lines = explode("\n", trim($output));
$jsonLine = '';
foreach ($lines as $line) {
    if (str_starts_with($line, '{"jsonrpc"')) {
        $jsonLine = $line;
        break;
    }
}

if (empty($jsonLine)) {
    echo RED . "‚ùå No JSON response found\n" . RESET;
    echo "Output: $output\n";
    exit(1);
}

$response = json_decode($jsonLine, true);
if (!$response || !isset($response['result']['tools'])) {
    echo RED . "‚ùå Invalid response format\n" . RESET;
    exit(1);
}

$tools = $response['result']['tools'];
$toolCount = count($tools);

echo GREEN . "‚úÖ Successfully retrieved tool list\n" . RESET;
echo "üìä Total tools available: $toolCount\n\n";

if ($toolCount !== 42) {
    echo YELLOW . "‚ö†Ô∏è  Expected 42 tools, found $toolCount\n" . RESET;
}

// Categorize tools
$categories = [
    'Debugging' => [
        'xdebug_connect', 'xdebug_disconnect', 'xdebug_set_breakpoint', 'xdebug_remove_breakpoint',
        'xdebug_step_into', 'xdebug_step_over', 'xdebug_step_out', 'xdebug_continue',
        'xdebug_get_stack', 'xdebug_get_variables', 'xdebug_eval'
    ],
    'Profiling' => [
        'xdebug_start_profiling', 'xdebug_stop_profiling', 'xdebug_get_profile_info', 'xdebug_analyze_profile'
    ],
    'Coverage' => [
        'xdebug_start_coverage', 'xdebug_stop_coverage', 'xdebug_get_coverage',
        'xdebug_analyze_coverage', 'xdebug_coverage_summary'
    ],
    'Statistics' => [
        'xdebug_get_memory_usage', 'xdebug_get_peak_memory_usage', 'xdebug_get_stack_depth',
        'xdebug_get_time_index', 'xdebug_info'
    ],
    'Error Handling' => [
        'xdebug_start_error_collection', 'xdebug_stop_error_collection', 'xdebug_get_collected_errors'
    ],
    'Tracing' => [
        'xdebug_start_trace', 'xdebug_stop_trace', 'xdebug_get_tracefile_name',
        'xdebug_start_function_monitor', 'xdebug_stop_function_monitor'
    ],
    'Advanced Debugging' => [
        'xdebug_list_breakpoints', 'xdebug_set_exception_breakpoint', 'xdebug_set_watch_breakpoint',
        'xdebug_get_function_stack', 'xdebug_print_function_stack'
    ],
    'Configuration' => [
        'xdebug_call_info', 'xdebug_get_features', 'xdebug_set_feature', 'xdebug_get_feature'
    ]
];

// Get list of available tool names
$availableTools = [];
foreach ($tools as $tool) {
    $availableTools[] = $tool['name'];
}

// Check each category
foreach ($categories as $categoryName => $expectedTools) {
    echo BLUE . "üìÅ $categoryName (" . count($expectedTools) . " tools)\n" . RESET;
    
    $found = 0;
    $missing = [];
    
    foreach ($expectedTools as $toolName) {
        if (in_array($toolName, $availableTools)) {
            echo GREEN . "  ‚úÖ $toolName\n" . RESET;
            $found++;
        } else {
            echo RED . "  ‚ùå $toolName (MISSING)\n" . RESET;
            $missing[] = $toolName;
        }
    }
    
    echo "  Summary: $found/" . count($expectedTools) . " tools available\n";
    if (!empty($missing)) {
        echo RED . "  Missing: " . implode(', ', $missing) . "\n" . RESET;
    }
    echo "\n";
}

// Check for unexpected tools
$expectedAllTools = array_merge(...array_values($categories));
$unexpectedTools = array_diff($availableTools, $expectedAllTools);

if (!empty($unexpectedTools)) {
    echo YELLOW . "üîç Unexpected tools found:\n" . RESET;
    foreach ($unexpectedTools as $tool) {
        echo "  - $tool\n";
    }
    echo "\n";
}

// Test a few safe tools (that don't require active debugging session)
echo BLUE . "üß™ Testing safe tools (no active session required)...\n" . RESET;
echo "-" . str_repeat("-", 50) . "\n";

$safeTools = [
    'xdebug_get_memory_usage' => [],
    'xdebug_get_peak_memory_usage' => [],
    'xdebug_info' => ['format' => 'array'],
    'xdebug_start_coverage' => [],
    'xdebug_stop_coverage' => []
];

foreach ($safeTools as $toolName => $args) {
    echo sprintf("Testing %-30s ... ", $toolName);
    
    $toolRequest = json_encode([
        'jsonrpc' => '2.0',
        'id' => uniqid(),
        'method' => 'tools/call',
        'params' => [
            'name' => $toolName,
            'arguments' => $args
        ]
    ]);
    
    $command = sprintf('echo %s | php bin/xdebug-mcp 2>/dev/null', escapeshellarg($toolRequest));
    $output = shell_exec($command);
    
    if ($output === null) {
        echo RED . "FAIL (no output)\n" . RESET;
        continue;
    }
    
    // Extract JSON from output
    $lines = explode("\n", trim($output));
    $jsonLine = '';
    foreach ($lines as $line) {
        if (str_starts_with($line, '{"jsonrpc"')) {
            $jsonLine = $line;
            break;
        }
    }
    
    if (empty($jsonLine)) {
        echo RED . "FAIL (no JSON)\n" . RESET;
        continue;
    }
    
    $response = json_decode($jsonLine, true);
    if (isset($response['error'])) {
        echo YELLOW . "SKIP (" . $response['error']['message'] . ")\n" . RESET;
    } elseif (isset($response['result'])) {
        echo GREEN . "PASS\n" . RESET;
    } else {
        echo RED . "FAIL (unexpected format)\n" . RESET;
    }
}

echo "\n" . "=" . str_repeat("=", 60) . "\n";
echo BLUE . "üìã Summary\n" . RESET;
echo "=" . str_repeat("=", 60) . "\n";
echo "‚úÖ MCP Server is running and responding\n";
echo "‚úÖ Tool registration system is working\n";
echo "üìä Total tools available: $toolCount/42\n";

if ($toolCount === 42) {
    echo GREEN . "üéâ All 42 tools are properly registered!\n" . RESET;
} else {
    echo YELLOW . "‚ö†Ô∏è  Tool count mismatch - expected 42, found $toolCount\n" . RESET;
}

echo "\n" . BLUE . "üí° To test tools requiring active debugging:\n" . RESET;
echo "   1. Run: php -dxdebug.mode=debug test/debug_test.php\n";
echo "   2. In another terminal: ./bin/test-all-tools\n";